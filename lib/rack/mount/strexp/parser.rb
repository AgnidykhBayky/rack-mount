#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'rack/mount/strexp/tokenizer'
module Rack
  module Mount
    class StrexpParser < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
     7,    10,     1,     2,   nil,     3,     1,     2,   nil,     3,
     1,     2,   nil,     3,     1,     2,     9,     3 ]

racc_action_check = [
     4,     7,     4,     4,   nil,     4,     0,     0,   nil,     0,
     2,     2,   nil,     2,     6,     6,     6,     6 ]

racc_action_pointer = [
     4,   nil,     8,   nil,     0,   nil,    12,     1,   nil,   nil,
   nil ]

racc_action_default = [
    -6,    -3,    -6,    -5,    -6,    -2,    -6,    -6,    -1,    -4,
    11 ]

racc_goto_table = [
     4,     8,     6,     8 ]

racc_goto_check = [
     1,     2,     1,     2 ]

racc_goto_pointer = [
   nil,     0,    -3 ]

racc_goto_default = [
   nil,   nil,     5 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 7, :_reduce_1,
  1, 7, :_reduce_none,
  1, 8, :_reduce_3,
  3, 8, :_reduce_4,
  1, 8, :_reduce_5 ]

racc_reduce_n = 6

racc_shift_n = 11

racc_token_table = {
  false => 0,
  :error => 1,
  :PARAM => 2,
  :LPAREN => 3,
  :RPAREN => 4,
  :CHAR => 5 }

racc_nt_base = 6

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "PARAM",
  "LPAREN",
  "RPAREN",
  "CHAR",
  "$start",
  "expr",
  "token" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
 result = "#{val[0]}#{val[1]}" 
    result
end

# reduce 2 omitted

def _reduce_3(val, _values, result)
          name = val[0].to_sym
          requirement = requirements[name]
          result = Const::REGEXP_NAMED_CAPTURE % [name, requirement]
        
    result
end

def _reduce_4(val, _values, result)
 result = "(#{val[1]})?" 
    result
end

def _reduce_5(val, _values, result)
 result = val[0] 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class StrexpParser
    end   # module Mount
  end   # module Rack
