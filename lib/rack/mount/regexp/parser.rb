#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'rack/mount/regexp/tokenizer'

module Rack
  module Mount
    class RegexpParser < Racc::Parser


class Node < Struct.new(:left, :right)
  def flatten
    if left.is_a?(Node)
      left.flatten + [right]
    else
      [left, right]
    end
  end
end

class Expression < Array
end

class Group < Struct.new(:value)
  attr_accessor :quantifier

  def ==(other)
    self.value == other.value &&
      self.quantifier == other.quantifier
  end
end

class Character < Struct.new(:value)
  attr_accessor :quantifier

  def ==(other)
    self.value == other.value &&
      self.quantifier == other.quantifier
  end
end
##### State transition tables begin ###

racc_action_table = [
     2,     3,     2,     3,     2,     3,     8,    10,    11,    12 ]

racc_action_check = [
     0,     0,     3,     3,     5,     5,     4,     7,     8,     9 ]

racc_action_pointer = [
    -2,   nil,   nil,     0,     6,     2,   nil,     3,     8,     4,
   nil,   nil,   nil,   nil ]

racc_action_default = [
    -9,    -5,    -6,    -9,    -9,    -1,    -4,    -9,    -9,    -3,
    -7,    14,    -8,    -2 ]

racc_goto_table = [
     4,     9,    13,     7 ]

racc_goto_check = [
     1,     3,     4,     1 ]

racc_goto_pointer = [
   nil,     0,   nil,    -4,    -7,   nil ]

racc_goto_default = [
   nil,   nil,     5,     6,   nil,     1 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 7, :_reduce_1,
  3, 8, :_reduce_2,
  2, 8, :_reduce_3,
  1, 8, :_reduce_none,
  1, 9, :_reduce_none,
  1, 9, :_reduce_6,
  3, 11, :_reduce_7,
  1, 10, :_reduce_none ]

racc_reduce_n = 9

racc_shift_n = 14

racc_token_table = {
  false => 0,
  :error => 1,
  :CHAR => 2,
  :LPAREN => 3,
  :RPAREN => 4,
  :QMARK => 5 }

racc_nt_base = 6

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "CHAR",
  "LPAREN",
  "RPAREN",
  "QMARK",
  "$start",
  "expression",
  "branch",
  "atom",
  "quantifier",
  "group" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
 result = Expression.new(val[0].flatten) 
    result
end

def _reduce_2(val, _values, result)
            val[1].quantifier = val[2]
            result = Node.new(val[0], val[1])
          
    result
end

def _reduce_3(val, _values, result)
 result = Node.new(val[0], val[1]) 
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
 result = Character.new(val[0]) 
    result
end

def _reduce_7(val, _values, result)
 result = Group.new(val[1]) 
    result
end

# reduce 8 omitted

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class RegexpParser
    end   # module Mount
  end   # module Rack
