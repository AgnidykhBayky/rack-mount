#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'rack/mount/regexp/tokenizer'

module Rack
  module Mount
    class RegexpParser < Racc::Parser


class Node < Struct.new(:left, :right)
  def flatten
    if left.is_a?(Node)
      left.flatten + [right]
    else
      [left, right]
    end
  end
end

class Expression < Array
  def initialize(ary)
    if ary.is_a?(Node)
      super(ary.flatten)
    else
      super([ary])
    end
  end
end

class Group < Struct.new(:value)
  attr_accessor :quantifier, :capture, :name

  def initialize(*args)
    @capture = true
    super
  end

  def capture?
    capture
  end

  def ==(other)
    self.value == other.value &&
      self.quantifier == other.quantifier &&
      self.capture == other.capture &&
      self.name == other.name
  end
end

class Anchor < Struct.new(:value)
end

class CharacterRange < Struct.new(:value)
  attr_accessor :negate, :quantifier

  def ==(other)
    self.value == other.value &&
      self.negate == other.negate &&
      self.quantifier == other.quantifier
  end
end

class Character < Struct.new(:value)
  attr_accessor :quantifier

  def ==(other)
    self.value == other.value &&
      self.quantifier == other.quantifier
  end
end
##### State transition tables begin ###

racc_action_table = [
     5,    16,     9,     7,     8,    14,    15,    19,     5,    10,
     9,     7,     8,    30,    22,    25,     5,    10,     9,     7,
     8,    24,    27,    25,     5,    10,     9,     7,     8,    11,
    21,    33,     5,    10,     9,     7,     8,    34,    16,    18,
    19,    10,    14,    15,    28,    29 ]

racc_action_check = [
     0,     3,     0,     0,     0,     3,     3,    18,    29,     0,
    29,    29,    29,    26,    11,    26,     2,    29,     2,     2,
     2,    17,    20,    17,     8,     2,     8,     8,     8,     1,
     8,    31,    28,     8,    28,    28,    28,    32,    12,     5,
     5,    28,    12,    12,    21,    21 ]

racc_action_pointer = [
    -2,    29,    14,    -7,   nil,    35,   nil,   nil,    22,   nil,
   nil,    14,    30,   nil,   nil,   nil,   nil,    18,     2,   nil,
    15,    35,   nil,   nil,   nil,   nil,    10,   nil,    30,     6,
   nil,    24,    30,   nil,   nil ]

racc_action_default = [
   -21,   -21,    -1,    -5,    -6,   -21,    -9,   -10,   -21,   -16,
   -17,   -21,    -3,    -4,   -18,   -19,   -20,   -21,   -21,   -12,
   -21,   -21,    35,    -2,    -7,   -11,   -21,   -13,   -21,   -21,
    -8,   -21,   -21,   -14,   -15 ]

racc_goto_table = [
     1,    17,    13,    12,   nil,   nil,   nil,   nil,    20,   nil,
   nil,    23,   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    31,    32 ]

racc_goto_check = [
     1,     6,     4,     3,   nil,   nil,   nil,   nil,     1,   nil,
   nil,     4,   nil,   nil,     6,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     1,     1 ]

racc_goto_pointer = [
   nil,     0,   nil,     1,    -1,   nil,    -4,   nil ]

racc_goto_default = [
   nil,   nil,     2,     3,   nil,     4,   nil,     6 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 15, :_reduce_1,
  3, 16, :_reduce_2,
  2, 16, :_reduce_3,
  2, 16, :_reduce_4,
  1, 16, :_reduce_none,
  1, 17, :_reduce_none,
  3, 17, :_reduce_7,
  4, 17, :_reduce_8,
  1, 17, :_reduce_9,
  1, 17, :_reduce_10,
  2, 20, :_reduce_11,
  1, 20, :_reduce_none,
  3, 19, :_reduce_13,
  5, 19, :_reduce_14,
  5, 19, :_reduce_15,
  1, 21, :_reduce_none,
  1, 21, :_reduce_none,
  1, 18, :_reduce_none,
  1, 18, :_reduce_none,
  1, 18, :_reduce_none ]

racc_reduce_n = 21

racc_shift_n = 35

racc_token_table = {
  false => 0,
  :error => 1,
  :LBRACK => 2,
  :RBRACK => 3,
  :L_ANCHOR => 4,
  :CHAR => 5,
  :LPAREN => 6,
  :RPAREN => 7,
  :QMARK => 8,
  :COLON => 9,
  :NAME => 10,
  :R_ANCHOR => 11,
  :STAR => 12,
  :PLUS => 13 }

racc_nt_base = 14

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LBRACK",
  "RBRACK",
  "L_ANCHOR",
  "CHAR",
  "LPAREN",
  "RPAREN",
  "QMARK",
  "COLON",
  "NAME",
  "R_ANCHOR",
  "STAR",
  "PLUS",
  "$start",
  "expression",
  "branch",
  "atom",
  "quantifier",
  "group",
  "bracket_expression",
  "anchor" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
 result = Expression.new(val[0]) 
    result
end

def _reduce_2(val, _values, result)
            val[1].quantifier = val[2]
            result = Node.new(val[0], val[1])
          
    result
end

def _reduce_3(val, _values, result)
 result = Node.new(val[0], val[1]) 
    result
end

def _reduce_4(val, _values, result)
            val[0].quantifier = val[1]
            result = val[0]
          
    result
end

# reduce 5 omitted

# reduce 6 omitted

def _reduce_7(val, _values, result)
 result = CharacterRange.new(val[1]) 
    result
end

def _reduce_8(val, _values, result)
 result = CharacterRange.new(val[2]); result.negate = true 
    result
end

def _reduce_9(val, _values, result)
 result = Anchor.new(val[0]) 
    result
end

def _reduce_10(val, _values, result)
 result = Character.new(val[0]) 
    result
end

def _reduce_11(val, _values, result)
 result = val.join 
    result
end

# reduce 12 omitted

def _reduce_13(val, _values, result)
 result = Group.new(val[1]) 
    result
end

def _reduce_14(val, _values, result)
 result = Group.new(val[3]); result.capture = false 
    result
end

def _reduce_15(val, _values, result)
 result = Group.new(val[3]); result.name = val[2] 
    result
end

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class RegexpParser
    end   # module Mount
  end   # module Rack
